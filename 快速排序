//输入要排序的n个数
//分别输入n个数的值
#include<stdio.h>

int PARENT(int i)
{
    //int i;
    return i/2;
}
int LEFT(int i){
    return 2*i;
}
int RIGHT(int i){
    return 2*i+1;
};
int MAXHEAPIFY(int *A,int i,int heapsize)
{
    int l,r,largest,temp;
    l=LEFT(i);
    r=RIGHT(i);
    largest = i;
    if(l<=heapsize && A[l]>A[i])
    {
        largest = l;
    }
    else
    {
        largest = i;
    }
    if(r<=heapsize && A[r]>A[largest])
    largest = r;
    if(largest != i){
        temp = A[largest];
        A[largest] = A[i];
        A[i] = temp;
        MAXHEAPIFY(A,largest,heapsize);
    }
}
int BUILDMAXHEAP(int *A,int heapsize)
{
    //heapsize = n;
    for(int i = heapsize/2;i>=1;i--)
    {
        MAXHEAPIFY(A,i,heapsize);
    }
}
int HEAPSORT(int *A,int heapsize)
{
    //printf("hello\n");
    BUILDMAXHEAP(A,heapsize);
    int temp;
    for(int i =heapsize;i>=2;i--)
    {
        temp = A[1];
        A[1] = A[i];
        A[i] = temp;
        heapsize = heapsize -1;
        MAXHEAPIFY(A,1,heapsize);
    }
}
int HEAPMAXIMUM(int * A)
{
    return A[1];
}
int HEAPEXTRACTMAX(int * A,int heapsize)
{
    if(heapsize<1)
    printf("heap underflow");
    int max = A[1];
    A[1] = A[heapsize];
    heapsize = heapsize -1;
    MAXHEAPIFY(A,1,heapsize);
    return max;
}
int HEAPINCREASEKEY(int *A,int i,int key)
{
    if(key < A[i])
    printf("new key is smaller than current key");
    A[i] = key;
    while(i > 1 && A[PARENT(i)] < A[i])
    {
        int temp = A[i];
        A[i] = A[PARENT(i)];
        A[PARENT(i)] = temp;
        i = PARENT(i);
     }
}
int MAXHEAPINSERT(int *A,int key,int heapsize)
{
    heapsize = heapsize + 1;
    A[heapsize] = -99999;
    HEAPINCREASEKEY(A,heapsize,key);
}
int main()
{
    int a[100],i,j,n;
    //scanf("%d",&x);
    scanf("%d",&n);
    //heapsize=n;
    for(i=1;i<=n;i++)
    scanf("%d",&a[i]);
    //BUILD-MAX-HEAP(A);
    BUILDMAXHEAP(a,n);
    //HEAPSORT(a,n);
    /*printf("after heapsort is\n");
    for(i=1;i<=n;i++)
    {
        printf("%d ",a[i]);
    }
    printf("\n");*/
    int max = HEAPMAXIMUM(a);
    printf("heapmaximum is %d\n",max);
    int m = HEAPEXTRACTMAX(a,n);
    printf("heapmaximum is %d\n",m);
    printf("after heapextractmax is\n");
    HEAPSORT(a,n-1);
    for(i=1;i<n;i++)
    {
        printf("%d ",a[i]);
    }
    printf("\n");
    HEAPINCREASEKEY(a,2,999);
    printf("after heapincreasekey is\n");
    HEAPSORT(a,n-1);
    for(i=1;i<n;i++)
    {
        printf("%d ",a[i]);
    }
    printf("\n");
    MAXHEAPINSERT(a,666,n-1);
    printf("after maxheapinsert is\n");
    HEAPSORT(a,n);
    for(i=1;i<=n;i++)
    {
        printf("%d ",a[i]);
    }
    return 0;
}
